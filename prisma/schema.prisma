generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model agente {
  age_id         Int                @id @default(autoincrement())
  age_nome       String?            @db.VarChar(100)
  age_login      String?            @db.VarChar(100)
  age_senha_hash String?            @db.VarChar(255)
  age_web_token  String?            @db.VarChar(255)
  permissoes     agente_permissao[] @relation("AgenteToPermissoes")
}

model agentes_permissoes {
  perm_id   Int                @id @default(autoincrement())
  perm_nome String?            @db.VarChar(100)
  agentes   agente_permissao[] @relation("AgenteToPermissoes")
}

model agente_permissao {
  age_id    Int
  perm_id   Int
  agente    agente             @relation("AgenteToPermissoes", fields: [age_id], references: [age_id])
  permissao agentes_permissoes @relation("AgenteToPermissoes", fields: [perm_id], references: [perm_id])

  @@id([age_id, perm_id])
  @@index([perm_id], map: "agente_permissao_perm_id_fkey")
}

model Bairro {
  bai_id     Int         @id @default(autoincrement())
  bai_nome   String      @db.VarChar(50)
  cid_id     Int
  cidades    Cidade      @relation(fields: [cid_id], references: [cid_id], map: "cid_id")
  lojas      Loja[]
  lojistas   Lojista[]
  usuarios   Usuario[]
  visitantes Visitante[]

  @@index([cid_id], map: "cid_id")
  @@map("bairros")
}

model Cidade {
  cid_id     Int         @id @default(autoincrement())
  cid_nome   String      @db.VarChar(50)
  est_id     Int
  bairros    Bairro[]
  estados    Estado      @relation(fields: [est_id], references: [est_id], map: "est_id")
  lojas      Loja[]
  lojistas   Lojista[]
  usuarios   Usuario[]
  visitantes Visitante[]

  @@index([est_id], map: "est_id")
  @@map("cidades")
}

model Estado {
  est_id     Int         @id @default(autoincrement())
  est_nome   String      @db.VarChar(50)
  est_sigla  String      @db.VarChar(50)
  cidades    Cidade[]
  lojas      Loja[]
  lojistas   Lojista[]
  usuarios   Usuario[]
  visitantes Visitante[]

  @@map("estados")
}

model Fatura {
  fatr_id              Int                @id @default(autoincrement())
  fatr_numero          Int?
  fatr_data_emissao    DateTime?          @default(now()) @db.DateTime(0)
  fatr_data_vencimento DateTime?          @db.DateTime(0)
  fatr_total           Decimal?           @db.Decimal(10, 2)
  fatr_pagmt_metodo    FATR_PAGMT_METODO?
  fatr_pagmt_data      DateTime?          @db.DateTime(0)
  fatr_status          FATR_STATUS?
  lojst_id             Int?
  pln_id               Int?
  lojistas             Lojista?           @relation(fields: [lojst_id], references: [lojst_id], onDelete: Restrict, onUpdate: Restrict, map: "faturas_ibfk_1")
  planos               Planos?            @relation(fields: [pln_id], references: [pln_id], onDelete: Restrict, onUpdate: Restrict, map: "faturas_ibfk_2")

  @@index([lojst_id], map: "lojst_id")
  @@index([pln_id], map: "pln_id")
  @@map("faturas")
}

model Loja {
  loj_id              Int                 @id @default(autoincrement())
  loj_nome            String              @db.VarChar(100)
  loj_cnpj            String              @db.VarChar(18)
  loj_logo            String?             @db.VarChar(255)
  loj_slogan          String?             @db.VarChar(255)
  loj_telefone        String              @db.VarChar(20)
  loj_email           String              @db.VarChar(150)
  loj_text_sobre      String?             @db.VarChar(255)
  loj_cep             String              @db.VarChar(10)
  loj_endereco        String              @db.VarChar(150)
  loj_data_cadastro   DateTime            @default(now()) @db.DateTime(0)
  cid_id              Int
  bai_id              Int
  est_id              Int
  lojst_id            Int
  lojista             Lojista             @relation(fields: [lojst_id], references: [lojst_id], onUpdate: Restrict, map: "fk_loj_lojst_id")
  cidade              Cidade              @relation(fields: [cid_id], references: [cid_id], onUpdate: Restrict, map: "lojas_ibfk_1")
  bairro              Bairro              @relation(fields: [bai_id], references: [bai_id], onUpdate: Restrict, map: "lojas_ibfk_2")
  estado              Estado              @relation(fields: [est_id], references: [est_id], onUpdate: Restrict, map: "lojas_ibfk_3")
  orcamento_variantes OrcamentoVariante[]
  produtos            Produto[]

  @@index([bai_id], map: "bai_id")
  @@index([cid_id], map: "cid_id")
  @@index([est_id], map: "est_id")
  @@index([lojst_id], map: "lojst_id")
  @@map("lojas")
}

model Lojista {
  lojst_id                Int                      @id @default(autoincrement())
  lojst_nome              String                   @db.VarChar(100)
  lojst_cpf               String                   @db.VarChar(11)
  lojst_img_perfil        String?                  @db.VarChar(255)
  lojst_telefone          String                   @db.VarChar(20)
  lojst_email             String                   @unique @db.VarChar(150)
  lojst_data_cadastro     DateTime                 @default(now())
  lojst_cep               String?                  @db.VarChar(10)
  lojst_endereco          String?                  @db.VarChar(150)
  lojst_status            LOJST_STATUS             @default(liberacao)
  lojst_senha_hash        String                   @db.VarChar(255)
  lojst_token_recuperacao String?                  @db.VarChar(255)
  cid_id                  Int
  bai_id                  Int
  est_id                  Int
  lojst_loja_parceira     String?                  @db.LongText
  lojst_login             String                   @unique @db.VarChar(50)
  lojst_web_token         String?                  @db.VarChar(255)
  lojst_token_expiracao   String?                  @db.VarChar(255)
  faturas                 Fatura[]
  lojas                   Loja[]
  cidade                  Cidade                   @relation(fields: [cid_id], references: [cid_id], onUpdate: Restrict, map: "lojistas_ibfk_1")
  bairro                  Bairro                   @relation(fields: [bai_id], references: [bai_id], onUpdate: Restrict, map: "lojistas_ibfk_2")
  estado                  Estado                   @relation(fields: [est_id], references: [est_id], onUpdate: Restrict, map: "lojistas_ibfk_3")
  permissoes_notificacoes Permissoes_notificacao[]

  @@index([bai_id], map: "bai_id")
  @@index([cid_id], map: "cid_id")
  @@index([est_id], map: "est_id")
  @@map("lojistas")
}

model OrcamentoVariante {
  orc_vrnt_id               Int        @id @default(autoincrement())
  orc_vrnt_quantidade_prodt Int?       @db.UnsignedInt
  orc_vrnt_preco_total      Decimal?   @db.Decimal(10, 2)
  loj_id                    Int?
  orcto_id                  Int?
  vrnt_id                   Int
  lojas                     Loja?      @relation(fields: [loj_id], references: [loj_id], onDelete: Restrict, onUpdate: Restrict, map: "orcamento_variantes_ibfk_1")
  orcamentos                Orcamento? @relation(fields: [orcto_id], references: [orcto_id], onDelete: Restrict, onUpdate: Restrict, map: "orcamento_variantes_ibfk_4")
  variantes                 Variante   @relation(fields: [vrnt_id], references: [vrnt_id], onUpdate: Restrict, map: "vrnt_id")

  @@index([loj_id], map: "loj_id")
  @@index([orcto_id], map: "orcto_id")
  @@index([vrnt_id], map: "vrnt_id")
  @@map("orcamento_variantes")
}

model Orcamento {
  orcto_id               Int                 @id @default(autoincrement())
  orcto_data_emissao     DateTime?           @default(now()) @db.DateTime(0)
  orcto_quantidade_prodt Int?                @db.UnsignedInt
  orcto_total            Decimal?            @db.Decimal(10, 2)
  orcto_fav              Boolean?
  orcto_creatAt          DateTime            @default(now())
  orcto_updateAt         DateTime            @updatedAt
  usr_id                 Int?
  vist_id                Int?
  orcamento_variantes    OrcamentoVariante[]
  usuarios               Usuario?            @relation(fields: [usr_id], references: [usr_id], onDelete: Restrict, onUpdate: Restrict, map: "orcamentos_ibfk_1")
  visitantes             Visitante?          @relation(fields: [vist_id], references: [vist_id], onDelete: Restrict, onUpdate: Restrict, map: "orcamentos_ibfk_2")

  @@index([usr_id], map: "usr_id")
  @@index([vist_id], map: "vist_id")
  @@map("orcamentos")
}

model Permissoes_notificacao {
  permi_id    Int         @id @default(autoincrement())
  permi_tipo  PERMI_TIPO?
  permi_ativa Boolean?    @default(true)
  lojst_id    Int?
  usr_id      Int?
  lojistas    Lojista?    @relation(fields: [lojst_id], references: [lojst_id], onDelete: Restrict, onUpdate: Restrict, map: "permissoes_notificacoes_ibfk_1")
  usuarios    Usuario?    @relation(fields: [usr_id], references: [usr_id], onDelete: Restrict, onUpdate: Restrict, map: "permissoes_notificacoes_ibfk_2")

  @@index([lojst_id], map: "lojst_id")
  @@index([usr_id], map: "usr_id")
  @@map("permissoes_notificacoes")
}

model Planos {
  pln_id    Int      @id @default(autoincrement())
  pln_nome  String?  @db.VarChar(100)
  pln_desc  String?  @db.VarChar(150)
  pln_preco Decimal? @db.Decimal(10, 2)
  faturas   Fatura[]

  @@map("planos")
}

model Produto {
  prodt_id         Int           @id @default(autoincrement())
  prodt_fotos      String?       @db.LongText
  prodt_nome       String        @db.VarChar(100)
  prodt_descricao  String?       @db.VarChar(255)
  prodt_created_at DateTime      @default(now())
  prodt_updated_at DateTime      @updatedAt
  loj_id           Int
  prodt_status     PRODT_STATUS
  opcoes           Opcao[]
  tipos            ProdutoTipo[]
  loja            Loja          @relation(fields: [loj_id], references: [loj_id], onUpdate: Restrict, map: "loj_id")
  variantes        Variante[]

  @@index([loj_id], map: "loj_id")
  @@map("produtos")
}

model ProdutoTipo {
  prod_id Int
  tp_id   Int
  produto Produto @relation(fields: [prod_id], references: [prodt_id], onDelete: Cascade)
  tipo    Tipo    @relation(fields: [tp_id], references: [tp_id], onDelete: Cascade)

  @@id([prod_id, tp_id])
  @@index([tp_id], map: "produto_tipos_tp_id_fkey")
  @@map("produto_tipos")
}

model Tipo {
  tp_id      Int             @id @default(autoincrement())
  tp_nome    String          @db.VarChar(150)
  produtos   ProdutoTipo[]
  categorias TipoCategoria[]

  @@map("tipos")
}

model TipoCategoria {
  tp_id     Int
  cat_id    Int
  categoria Categoria @relation(fields: [cat_id], references: [cat_id], onDelete: Cascade)
  tipo      Tipo      @relation(fields: [tp_id], references: [tp_id], onDelete: Cascade)

  @@id([tp_id, cat_id])
  @@index([cat_id], map: "tipo_categorias_cat_id_fkey")
  @@map("tipo_categorias")
}

model Categoria {
  cat_id   Int             @id @default(autoincrement())
  cat_nome String          @db.VarChar(150)
  tipos    TipoCategoria[]

  @@map("categorias")
}

model Tipos_preco {
  tp_prec_id   Int        @id @default(autoincrement())
  tp_prec_nome String     @db.VarChar(100)
  variantes    Variante[]

  @@map("tipos_precos")
}

model Usuario {
  usr_id                  Int                      @id @default(autoincrement())
  usr_nome                String?                  @db.VarChar(100)
  usr_cpf                 String?                  @db.VarChar(11)
  usr_img_perfil          String?                  @db.VarChar(255)
  usr_telefone            String?                  @db.VarChar(20)
  usr_email               String?                  @unique @db.VarChar(150)
  usr_data_cadastro       DateTime?                @default(now()) @db.DateTime(0)
  usr_cep                 String?                  @db.VarChar(10)
  usr_endereco            String?                  @db.VarChar(150)
  usr_status              USR_STATUS?              @default(liberacao)
  cid_id                  Int?
  bai_id                  Int?
  est_id                  Int?
  usr_prod_favoritos      String?                  @db.LongText
  usr_loj_favoritas       String?                  @db.LongText
  usr_senha_hash          String?                  @db.VarChar(255)
  usr_token_inspiracao    String?                  @db.VarChar(255)
  usr_token_recuperacao   String?                  @db.VarChar(255)
  orcamentos              Orcamento[]
  permissoes_notificacoes Permissoes_notificacao[]
  cidades                 Cidade?                  @relation(fields: [cid_id], references: [cid_id], onDelete: Restrict, map: "usuarios_ibfk_1")
  bairros                 Bairro?                  @relation(fields: [bai_id], references: [bai_id], onDelete: Restrict, map: "usuarios_ibfk_2")
  estados                 Estado?                  @relation(fields: [est_id], references: [est_id], onDelete: Restrict, map: "usuarios_ibfk_3")

  @@index([bai_id], map: "bai_id")
  @@index([cid_id], map: "cid_id")
  @@index([est_id], map: "est_id")
  @@map("usuarios")
}

model Variante {
  vrnt_id             Int                 @id @default(autoincrement())
  vrnt_fotos          String?             @db.LongText
  vrnt_preco          Decimal             @db.Decimal(10, 2)
  prodt_id            Int
  tp_prec_id          Int
  orcamento_variantes OrcamentoVariante[]
  opcoes              VarianteOpcoes[]
  produto             Produto             @relation(fields: [prodt_id], references: [prodt_id], onDelete: Cascade, map: "prodt_id")
  tipos_precos        Tipos_preco         @relation(fields: [tp_prec_id], references: [tp_prec_id], onUpdate: Restrict, map: "tp_prec_id")

  @@index([prodt_id], map: "prodt_id")
  @@index([tp_prec_id], map: "tp_prec_id")
  @@map("variantes")
}

model VarianteOpcoes {
  vrnt_id  Int
  opc_id   Int
  opcao    Opcao    @relation(fields: [opc_id], references: [opc_id], onDelete: Cascade)
  variante Variante @relation(fields: [vrnt_id], references: [vrnt_id], onDelete: Cascade)

  @@id([vrnt_id, opc_id])
  @@index([opc_id], map: "variante_opcoes_opc_id_fkey")
  @@map("variante_opcoes")
}

model Opcao {
  opc_id      Int              @id @default(autoincrement())
  opc_nome    String           @db.VarChar(100)
  opc_valores Json             
  prodt_id    Int?
  produtos    Produto?         @relation(fields: [prodt_id], references: [prodt_id], onUpdate: Restrict, map: "fk_prodt_id")
  variantes   VarianteOpcoes[]

  @@index([prodt_id], map: "fk_prodt_id")
  @@map("opcoes")
}

model Visitante {
  vist_id       Int         @id @default(autoincrement())
  vist_nome     String?     @db.VarChar(100)
  vist_telefone String?     @db.VarChar(20)
  vist_email    String?     @db.VarChar(150)
  vist_endereco String?     @db.VarChar(150)
  cid_id        Int?
  bai_id        Int?
  est_id        Int?
  orcamentos    Orcamento[]
  bairros       Bairro?     @relation(fields: [bai_id], references: [bai_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_bairro")
  cidades       Cidade?     @relation(fields: [cid_id], references: [cid_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_cidade")
  estados       Estado?     @relation(fields: [est_id], references: [est_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_estado")

  @@index([bai_id], map: "bai_id")
  @@index([cid_id], map: "cid_id")
  @@index([est_id], map: "est_id")
  @@map("visitantes")
}

enum PRODT_STATUS {
  ativo
  liberacao
  inativo
}

enum PERMI_TIPO {
  orcamento
}

enum FATR_PAGMT_METODO {
  cartao_credito
  cartao_debito
  transferencia
  boleto
  pix
}

enum FATR_STATUS {
  ativa
  inativa
  pendente
}

enum USR_STATUS {
  ativo
  liberacao
  inativo
}

enum LOJST_STATUS {
  ativo
  liberacao
  inativo
}
